defmodule ExKcal.Guards do
  defguard is_non_neg_number(value) when is_number(value) and value >= 0
  defguard is_non_neg_float(value) when is_float(value) and value >= 0

  @doc guard: true
  defmacro is_any_of_structs(term, names) do
    case __CALLER__.context do
      nil ->
        quote generated: true do
          case unquote(names) do
            names when is_list(names) ->
              ExKcal.Guards.generate_case(unquote(term), names)
            _ ->
              raise ArgumentError
          end
        end

      :match ->
        raise ArgumentError

      :guard ->
        quote do
          is_map(unquote(term)) and
            (is_atom(unquote(names)) or :fail) and
            :erlang.is_map_key(:__struct__, unquote(term)) and
            :erlang.map_get(:__struct__, unquote(term)) == unquote(names)
        end
    end
  end

  defmacro generate_case(term, names) do
    {
      :case,
      [],
      [
        term,
        [
          do:
            Enum.map(
              names,
              fn name ->
                {:->, [], [[{:%{}, [], [__struct__: name]}], true]}
              end
            ) ++ [{:->, [], [[{:_, [], Elixir}], false]}]
        ]
      ]
    }
  end
end
